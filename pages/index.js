import Head from 'next/head'
import Grid from '@mui/material/Unstable_Grid2'; // Grid version 2
import {
  CircularProgress,
  Container,
  IconButton,
  InputAdornment,
  Pagination,
  Paper,
  Stack,
  TextField,
  Typography
} from "@mui/material";
import { useEffect, useMemo, useState } from "react";
import SearchIcon from '@mui/icons-material/Search';
import ResultsList from "@/frontend/components/ResultsList";
import { useGetTermsHistoryQuery, useLazyGetResultsQuery } from "@/frontend/services/api";
import QueryHistory from "@/frontend/components/QueryHistory";

const PAGE_SIZE = 10;
export default function Home() {
  const [trigger, results] = useLazyGetResultsQuery();
  const { data, error, isLoading } = useGetTermsHistoryQuery();
  const [searchTerm, setSearchTerm] = useState('');
  const [findTerm, setFindTerm] = useState('');
  const [page, setPage] = useState(1);
  const [history, setHistory] = useState([]);

  useEffect(() => {
    if (data && !error) {
      setHistory(data);
    }
  }, [data])

  const getSlice = () => {
    return results?.status !== 'pending' && results?.data?.slice((page - 1) * PAGE_SIZE, (page - 1) * PAGE_SIZE + PAGE_SIZE);
  }
  const slice = useMemo(() => getSlice(), [results, page]);

  const handlePageChange = (e, value) => {
    setPage(value);
  }

  const handleOnChange = (e) => {
    const val = e.target.value;
    const name = e.target?.name;
    if (name === 'find') {
      setFindTerm(val)
    } else {
      setSearchTerm(val)
    }
  }

  const handleOnKeyDown = async (e) => {
    if (e.key !== 'Enter' || !searchTerm) return null;
    await handleSearch();
  }

  const handleSearch = async () => {
    if (!searchTerm) return null;
    setPage(1)
    setFindTerm('')
    setHistory([searchTerm, ...history]);
    await trigger(searchTerm);
  }

  const handlePastSearchTerm = async (pastSearchTerm) => {
    await trigger(pastSearchTerm);
    setSearchTerm(pastSearchTerm);
  }

  return (
    <>
      <Head>
        <title>Duck Proxy</title>
        <meta name="description" content="Generated by create next app"/>
      </Head>
      <Container sx={{ maxWidth: 1024 }}>
        <Typography variant={'h1'} mb={5} align={'center'}>Duck Proxy</Typography>
        <Grid container spacing={2}>
          <Grid xs={4}>
            <TextField label={'Find'}
                       sx={{ width: 350, mb: 5 }}
                       value={findTerm}
                       name={'find'}
                       onKeyDown={handleOnKeyDown}
                       onChange={handleOnChange}
                       inputProps={{
                         autoComplete: 'off'
                       }}
            />
            <Typography>Past Queries</Typography>
            <Paper sx={{ minHeight: 300 }}>
              {isLoading ? <CircularProgress/> : <QueryHistory history={history} onClick={handlePastSearchTerm}/>}
            </Paper>
          </Grid>
          <Grid xs={8}>
            <Stack justifyContent={'center'} direction={'row'}>
              <TextField label={'Search'}
                         sx={{ width: 350, mb: 5 }}
                         value={searchTerm}
                         onKeyDown={handleOnKeyDown}
                         onChange={handleOnChange}
                         inputProps={{
                           autoComplete: 'off'
                         }}
                         InputProps={{
                           endAdornment: <InputAdornment position="end">
                             <IconButton onClick={handleSearch}>
                               <SearchIcon/>
                             </IconButton>
                           </InputAdornment>
                         }}
              />
            </Stack>
            <Stack>
              <Stack direction={'row'} alignItems={'center'} justifyContent={'center'}>{results?.status === 'pending' ?
                <CircularProgress/> : null}</Stack>
              <ResultsList results={slice} findTerm={findTerm}/>
              {results?.data?.length > 0 && results?.status !== 'pending' ?
                <Pagination sx={{ alignSelf: 'center', mt: 3 }}
                            page={page}
                            onChange={handlePageChange}
                            count={Math.ceil(results?.data?.length / PAGE_SIZE)}/> : null}
            </Stack>
          </Grid>
        </Grid>
      </Container>
    </>
  )
}
